require(devtools)
require(roxygen2)
load_all()
install.packages("rmarkdown")
load_all()
install.packages("clisymbols")
load_all()
install.packages("whisker")
load_all()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(rangevoting)
## basic example code
summary(cars)
plot(pressure)
use_readme_rmd(open = interactive())
#votes are previously stored in a csv file
#since a real sample isn't available, a random one is created
N = 1000 #number of voters
candidates = c('A','B','C','D','E','F')
parties = c('cons','sd','ld','comm','nat','green')
counter = rep(0,length(parties))
names(counter)=parties
elected=c()
ballots = replicate(N, round(runif(length(candidates),min=0,max=5)))
votes = data.frame(candidates,ballots,row.names = parties)
write.csv2(votes, file="randomcostituency.csv")
library(rangevoting)
help(majority)
require(devtools)
devtools::install_github('unimi-dse/1a62ddfc')
devtools::install_github('unimi-dse/1a62ddfc/rangevoting')
require(rangevoting)
help(majority)
help(randomvote)
library(rangevoting)
help("randomvote")
devtools::use_package()
devtools::package_file()
library(roxygen2)
devtools::create("DESCRIPTION")
devtools::build_readme(path="C:\\Users\\DavideR\\Desktop\\Unimi\\Coding in R\\rangevoting\\README.Rmd")
devtools::build_readme(path="C:/Users/DavideR/Desktop/Unimi/Coding in R/rangevoting/README.Rmd")
devtools::build_readme("C:/Users/DavideR/Desktop/Unimi/Coding in R/rangevoting/README.Rmd")
help("build_readme")
devtools::build_readme("C:/Users/DavideR/Desktop/Unimi/Coding in R/rangevoting/README.Rmd")
devtools::build_readme("C:/Users/DavideR/Desktop/Unimi/Coding in R/rangevoting")
devtools::load_all(".")
devtools::package_info()
help("package_file")
read.dcf("DESCRIPTION.dcf")
library(rangevoting)
help(majority)
